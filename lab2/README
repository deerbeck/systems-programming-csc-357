Johannes Hirschbeck (jhirsc01)

While programming the uniq program I tried splitting up my source files to
work with make and get a better understanding in how source files schould
be set up so that larger programs are easier to overview. I am pretty sure
my uniq program works, but I am not 100% sure if I did it in the most 
efficient way or not.

Problems:
	1.	(a)	char *cp;
		(b)	char *ap;
		(c)	int **pp;
		
	2. In C it is possible to declare and initialize a pointer
	to itself. But only if it is a void pointer. Becaue any other type
	for example an int pointer would be an incompatible type beacause 
	an int pointer expects to point at an int and not at a pointer that
	points to an int. Void pointers however are not of any type and
	can therefor point to themselves.
	One would declare it as "void *pa = &pa;". 
	But I don't think it is very useful.
	
	3. In the for loop the condition " p != '\0'" falsely checks if the
	current value of the point er is the \0 character.
	It does not check if the content at that address is the NULL Character.
	What will happen when you execute it is that the for loop never stops
	(because p always has an address stored) and accesses memmory that it
	is not allowed to access (But at least it puts "Hello, world!\n" before
	that happens). Keyword Segmentation fault.
	One can fix it by dereferencing the pointer in the condition.
	-> " *p != '\0'"
	
	4.(a)	It is correct in the way, that the value of a variable
		or expression of type array is the address of element zero
		of the array.
		The name of the array is therefore a synonym for the location
		of the initial element.
		pa = &a[0]; is equal to pa = a;
		Pointer arithmetic can be used to access the elements of an
		array. *(pa +i) is equal to a[i] and gives us the content of
		the i-th element of the array.
		-> An array index epression is equivalent to one written as
		a pointer and offset.
		
	  (b)	A pointer is fundamentally different from an array because a 
	  	pointer is a variable, so pa = a and pa++ are legal.
	  	But an array name is not a variable -> constructions like
	  	a = pa and a++ are illegal.
	  	
	5. Q: In Section 1.7, the argument to perror is defined with the ISO C
	attribute const, whereas the integer argument to strerror isnâ€™t 
	defined with this attribute. Why?
	A: Keyword "Pass by Value" and "Pass by reference". As the argument
	for perror is a pointer to the msg (pass by reference), perror could
	modify the string the pointer points to. With const it is ensured
	that perror won't modify the string. However the const is not needed
	for strerror because its argument is an int which is passed by value.
	
	6. If the calendar time is stored as a signed 32-bit integer, in which
	year will it overflow? How can we extend the overflow point? Are these
	strategies compatible with existing applications?
	32-bit signed integer --> +2^16 sec-> +2147483648 sec --> +35791394 min
	--> +596523 hrs --> +24855 days --> +68 years --> year 2038
	Extending overflow point by expanding int to 64-bit integer.
	However every application has to be recompiled/may run into 
	compatibility issues. Files/media that use 32-bit integers have
	to be updated as well.
	
	7. It is defined in the stddef.h header file, which are found in the 
	compilers stddef.h file. But for both versions available on unix5 its
	actual data type is "long unsigned int".
		
